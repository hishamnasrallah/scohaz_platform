# Generated by Django 5.1.4 on 2024-12-19 13:03

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dynamicflow', '0015_remove_condition_active_remove_condition_description_and_more'),
        ('lookup', '0003_lookup_is_category'),
    ]

    operations = [
        migrations.RemoveField(
            model_name='field',
            name='_only_positive',
        ),
        migrations.RemoveField(
            model_name='field',
            name='_size_greater_than',
        ),
        migrations.RemoveField(
            model_name='field',
            name='_size_less_than',
        ),
        migrations.AddField(
            model_name='field',
            name='_allowed_characters',
            field=models.CharField(blank=True, help_text='Allowed characters for text fields (e.g., alphanumeric only).', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_coordinates_format',
            field=models.BooleanField(blank=True, default=False, help_text='Validate the field as geographical coordinates (latitude and longitude).', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_default_boolean',
            field=models.BooleanField(blank=True, default=False, help_text='The default value for boolean fields.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_default_value',
            field=models.CharField(blank=True, help_text='The default value for the field.', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_file_types',
            field=models.CharField(blank=True, help_text='Allowed file types/extensions (e.g., .pdf, .docx).', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_forbidden_words',
            field=models.JSONField(blank=True, help_text='A list of words that are not allowed in text fields.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_future_only',
            field=models.BooleanField(blank=True, default=False, help_text='Restrict the field to future dates only.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_image_max_height',
            field=models.PositiveIntegerField(blank=True, help_text='The maximum allowed image height in pixels.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_image_max_width',
            field=models.PositiveIntegerField(blank=True, help_text='The maximum allowed image width in pixels.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_integer_only',
            field=models.BooleanField(blank=True, default=False, help_text='Restrict the field to integer values only.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_max_file_size',
            field=models.PositiveIntegerField(blank=True, help_text='The maximum allowed file size in bytes.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_max_selections',
            field=models.PositiveIntegerField(blank=True, help_text='The maximum number of selections allowed for multi-choice fields.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_min_selections',
            field=models.PositiveIntegerField(blank=True, help_text='The minimum number of selections required for multi-choice fields.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_past_only',
            field=models.BooleanField(blank=True, default=False, help_text='Restrict the field to past dates only.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_positive_only',
            field=models.BooleanField(blank=True, default=False, help_text='Restrict the field to positive values only.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_precision',
            field=models.PositiveIntegerField(blank=True, help_text='The precision for decimal fields (number of decimal places).', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_regex_pattern',
            field=models.CharField(blank=True, help_text='A regex pattern to enforce specific formats for text fields.', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_unique',
            field=models.BooleanField(blank=True, default=False, help_text='Ensure the field value is unique.', null=True),
        ),
        migrations.AddField(
            model_name='field',
            name='_uuid_format',
            field=models.BooleanField(blank=True, default=False, help_text='Ensure the field value is a valid UUID.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_category',
            field=models.ManyToManyField(blank=True, help_text='The categories this field belongs to.', to='dynamicflow.category'),
        ),
        migrations.AlterField(
            model_name='field',
            name='_date_greater_than',
            field=models.DateField(blank=True, help_text='The earliest allowed date for date fields.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_date_less_than',
            field=models.DateField(blank=True, help_text='The latest allowed date for date fields.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_field_display_name',
            field=models.CharField(blank=True, help_text='The display name of the field in English.', max_length=100, null=True, verbose_name='Field Display Name'),
        ),
        migrations.AlterField(
            model_name='field',
            name='_field_display_name_ara',
            field=models.CharField(blank=True, help_text='The display name of the field in Arabic.', max_length=100, null=True, verbose_name='Field Display Name Ara'),
        ),
        migrations.AlterField(
            model_name='field',
            name='_field_name',
            field=models.CharField(blank=True, help_text='The internal name of the field.', max_length=50, null=True, verbose_name='Field Name'),
        ),
        migrations.AlterField(
            model_name='field',
            name='_field_type',
            field=models.ForeignKey(blank=True, help_text='The type of the field (e.g., text, number, date).', max_length=50, null=True, on_delete=django.db.models.deletion.CASCADE, to='dynamicflow.fieldtype'),
        ),
        migrations.AlterField(
            model_name='field',
            name='_is_disabled',
            field=models.BooleanField(blank=True, default=False, help_text='Disable the field to prevent modifications.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_is_hidden',
            field=models.BooleanField(blank=True, default=False, help_text='Hide the field from display.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_lookup',
            field=models.ForeignKey(blank=True, help_text='The lookup associated with this field for predefined choices.', limit_choices_to={'is_category': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='field_lookups', to='lookup.lookup'),
        ),
        migrations.AlterField(
            model_name='field',
            name='_mandatory',
            field=models.BooleanField(blank=True, default=False, help_text='Mark the field as mandatory.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_max_length',
            field=models.PositiveIntegerField(blank=True, help_text='The maximum allowed length for text fields.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_min_length',
            field=models.PositiveIntegerField(blank=True, help_text='The minimum required length for text fields.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_parent_field',
            field=models.ForeignKey(blank=True, help_text='The parent field for hierarchical structuring. Used for nested fields.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sub_fields', to='dynamicflow.field'),
        ),
        migrations.AlterField(
            model_name='field',
            name='_sequence',
            field=models.IntegerField(blank=True, help_text="The sequence number to determine the field's display order.", null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_value_greater_than',
            field=models.FloatField(blank=True, help_text='The minimum allowed value for numeric fields.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='_value_less_than',
            field=models.FloatField(blank=True, help_text='The maximum allowed value for numeric fields.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='active_ind',
            field=models.BooleanField(blank=True, default=True, help_text='Indicate if the field is active.', null=True),
        ),
        migrations.AlterField(
            model_name='field',
            name='allowed_lookups',
            field=models.ManyToManyField(blank=True, help_text='Allowed lookup values for choice fields.', related_name='allowed_field_lookups', to='lookup.lookup'),
        ),
        migrations.AlterField(
            model_name='field',
            name='service',
            field=models.ManyToManyField(blank=True, help_text='The service(s) this field belongs to.', limit_choices_to={'parent_lookup__name': 'Service'}, related_name='service_field', to='lookup.lookup'),
        ),
    ]
