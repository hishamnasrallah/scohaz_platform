# Generated by Django 5.1.4 on 2025-07-07 10:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('reporting_templates', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PDFTemplateDataSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_key', models.CharField(help_text='Key to access this data in template', max_length=50)),
                ('display_name', models.CharField(max_length=100)),
                ('fetch_method', models.CharField(choices=[('model_query', 'Model Query'), ('raw_sql', 'Raw SQL'), ('custom_function', 'Custom Function'), ('related_field', 'Related Field'), ('prefetch', 'Prefetch Related')], max_length=20)),
                ('query_path', models.CharField(blank=True, help_text='Path for related fields (e.g., user__profile__address)', max_length=255)),
                ('filter_config', models.JSONField(blank=True, default=dict, help_text='Filter configuration using parameters')),
                ('custom_function_path', models.CharField(blank=True, max_length=255)),
                ('raw_sql', models.TextField(blank=True)),
                ('post_process_function', models.CharField(blank=True, help_text='Function to process fetched data', max_length=255)),
                ('cache_timeout', models.IntegerField(default=0, help_text='Cache timeout in seconds (0 = no cache)')),
                ('order', models.IntegerField(default=0)),
                ('active_ind', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['order', 'source_key'],
            },
        ),
        migrations.CreateModel(
            name='PDFTemplateParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parameter_key', models.CharField(help_text='Key used in queries and templates', max_length=50)),
                ('display_name', models.CharField(max_length=100)),
                ('display_name_ara', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('description_ara', models.TextField(blank=True)),
                ('parameter_type', models.CharField(choices=[('integer', 'Integer'), ('string', 'String'), ('date', 'Date'), ('datetime', 'DateTime'), ('boolean', 'Boolean'), ('float', 'Float'), ('uuid', 'UUID'), ('model_id', 'Model ID'), ('user_id', 'User ID')], max_length=20)),
                ('is_required', models.BooleanField(default=True)),
                ('default_value', models.CharField(blank=True, max_length=255)),
                ('widget_type', models.CharField(choices=[('text', 'Text Input'), ('number', 'Number Input'), ('date', 'Date Picker'), ('datetime', 'DateTime Picker'), ('select', 'Dropdown'), ('radio', 'Radio Buttons'), ('checkbox', 'Checkbox'), ('user_search', 'User Search'), ('model_search', 'Model Search')], default='text', max_length=20)),
                ('widget_config', models.JSONField(blank=True, default=dict, help_text='Additional widget configuration (choices, min/max, etc.)')),
                ('validation_rules', models.JSONField(blank=True, default=dict, help_text='Validation rules for the parameter')),
                ('query_field', models.CharField(help_text='Field name in database query', max_length=100)),
                ('query_operator', models.CharField(default='exact', help_text='Query operator (exact, icontains, gte, etc.)', max_length=20)),
                ('allow_user_override', models.BooleanField(default=True, help_text='Whether users can override this parameter')),
                ('order', models.IntegerField(default=0)),
                ('active_ind', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['order', 'parameter_key'],
            },
        ),
        migrations.AlterModelOptions(
            name='pdftemplate',
            options={'ordering': ['-created_at'], 'permissions': [('can_design_template', 'Can design PDF templates'), ('can_generate_pdf', 'Can generate PDFs from templates'), ('can_generate_others_pdf', 'Can generate PDFs for other users')]},
        ),
        migrations.AddField(
            model_name='pdfgenerationlog',
            name='generated_for',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pdfs_generated_for', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pdfgenerationlog',
            name='parameters',
            field=models.JSONField(default=dict, help_text='Parameters used for generation'),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='allow_other_generation',
            field=models.BooleanField(default=False, help_text='Whether users can generate reports about others'),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='allow_self_generation',
            field=models.BooleanField(default=True, help_text='Whether users can generate reports about themselves'),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='custom_function_path',
            field=models.CharField(blank=True, help_text='Python path to custom data fetching function', max_length=255),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='data_source_type',
            field=models.CharField(choices=[('model', 'Model Query'), ('raw_sql', 'Raw SQL'), ('custom_function', 'Custom Function'), ('api', 'External API')], default='model', max_length=20),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='query_filter',
            field=models.JSONField(blank=True, default=dict, help_text='Default filter conditions for queries'),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='raw_sql_query',
            field=models.TextField(blank=True, help_text='Raw SQL query for data fetching'),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='related_models',
            field=models.JSONField(blank=True, default=dict, help_text='Configuration for fetching related model data'),
        ),
        migrations.AddField(
            model_name='pdftemplate',
            name='requires_parameters',
            field=models.BooleanField(default=False, help_text='Whether this template requires parameters to generate'),
        ),
        migrations.AddField(
            model_name='pdftemplateelement',
            name='loop_config',
            field=models.JSONField(blank=True, default=dict, help_text='Configuration for loop elements'),
        ),
        migrations.AddField(
            model_name='pdftemplateelement',
            name='parent_element',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_elements', to='reporting_templates.pdftemplateelement'),
        ),
        migrations.AddField(
            model_name='pdftemplatevariable',
            name='transform_function',
            field=models.CharField(blank=True, help_text='Function to transform the value', max_length=255),
        ),
        migrations.AlterField(
            model_name='pdfgenerationlog',
            name='context_data',
            field=models.JSONField(default=dict, help_text='Full context data used for generation'),
        ),
        migrations.AlterField(
            model_name='pdftemplate',
            name='content_type',
            field=models.ForeignKey(blank=True, help_text='Primary model this template queries data from', null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype'),
        ),
        migrations.AlterField(
            model_name='pdftemplateelement',
            name='data_source',
            field=models.CharField(blank=True, help_text='Data source key or path to get dynamic data', max_length=200),
        ),
        migrations.AlterField(
            model_name='pdftemplateelement',
            name='element_type',
            field=models.CharField(choices=[('text', 'Text'), ('dynamic_text', 'Dynamic Text'), ('image', 'Image'), ('dynamic_image', 'Dynamic Image'), ('line', 'Line'), ('rectangle', 'Rectangle'), ('circle', 'Circle'), ('table', 'Table'), ('chart', 'Chart'), ('barcode', 'Barcode'), ('qrcode', 'QR Code'), ('signature', 'Signature Field'), ('page_break', 'Page Break'), ('loop', 'Loop Container'), ('conditional', 'Conditional Container')], max_length=20),
        ),
        migrations.AlterField(
            model_name='pdftemplatevariable',
            name='data_source',
            field=models.CharField(help_text='Source key and path like main.user.profile.full_name', max_length=200),
        ),
        migrations.AlterField(
            model_name='pdftemplatevariable',
            name='data_type',
            field=models.CharField(choices=[('text', 'Text'), ('number', 'Number'), ('date', 'Date'), ('datetime', 'DateTime'), ('boolean', 'Boolean'), ('image', 'Image'), ('list', 'List'), ('dict', 'Dictionary'), ('model', 'Model Instance')], default='text', max_length=20),
        ),
        migrations.AddIndex(
            model_name='pdfgenerationlog',
            index=models.Index(fields=['generated_by', 'created_at'], name='reporting_t_generat_2ea3ba_idx'),
        ),
        migrations.AddIndex(
            model_name='pdfgenerationlog',
            index=models.Index(fields=['template', 'status'], name='reporting_t_templat_6602de_idx'),
        ),
        migrations.AddField(
            model_name='pdftemplatedatasource',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='pdftemplatedatasource',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_sources', to='reporting_templates.pdftemplate'),
        ),
        migrations.AddField(
            model_name='pdftemplateparameter',
            name='restricted_to_groups',
            field=models.ManyToManyField(blank=True, help_text='Only these groups can use this parameter', to='auth.group'),
        ),
        migrations.AddField(
            model_name='pdftemplateparameter',
            name='template',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='reporting_templates.pdftemplate'),
        ),
        migrations.AlterUniqueTogether(
            name='pdftemplatedatasource',
            unique_together={('template', 'source_key')},
        ),
        migrations.AlterUniqueTogether(
            name='pdftemplateparameter',
            unique_together={('template', 'parameter_key')},
        ),
    ]
